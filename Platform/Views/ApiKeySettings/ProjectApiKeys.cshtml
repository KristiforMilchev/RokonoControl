@{
   
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
    ViewData["Title"] = $"Manage API Keys";
    var ProjectId = ViewData["ProjectId"] as int?;
}

<style>
    .e-toolbar.e-control[class*="e-toolbar"] {
    box-sizing: content-box;
    text-align: center;
}

</style>

        <div class="row  card-layout">
            <div class="col-md-12">
                <!-- Basic Card Layout  -->
                <div tabindex="0" class="e-card" id="basic_card">
                    <div class="e-card-header">

 
                    </div>
                    
                    <div class="e-card-content">
                        <div id="element"></div>

                        <div id="tab1_content" style="display: none; min-height:80vh;">
                            @await Component.InvokeAsync("BugReportFormSettings", @ProjectId)


                        </div>
                        <div id="tab2_content" style="display: none; min-height:80vh;">
                           
                            @await Component.InvokeAsync("PublicDiscussionBoardSetting", @ProjectId)

                        </div>
                        <div id="tab3_content" style="display: none; min-height:80vh;">
                             @await Component.InvokeAsync("PublicFeedbackSettings", @ProjectId)

                        </div>
                        
                    </div>

                </div>
            </div>


<script>
$( document ).ready(function() {
   var tabObj = new ej.navigations.Tab({
            selected: tabSelected,
            items: [
                {
                    header: { 'text': 'Bug Report Settings' },
                    content: '#tab1_content'
                },
                {
                    header: { 'text': 'Discussions Settings' },
                    content: '#tab2_content'
                },
                {
                    header: { 'text': 'Feedback Settings' },
                    content: '#tab3_content'
                }
            ]
        });
        //Render initialized Tab component
        tabObj.appendTo('#element');

});
//Initialize Tab component
document.getElementById("copyButton").addEventListener("click", function() {
    copyToClipboard(document.getElementById("copyTarget"));
});

function copyToClipboard(elem) {
	  // create hidden text element, if it doesn't already exist
    var targetId = "_hiddenCopyText_";
    var isInput = elem.tagName === "INPUT" || elem.tagName === "TEXTAREA";
    var origSelectionStart, origSelectionEnd;
    if (isInput) {
        // can just use the original source element for the selection and copy
        target = elem;
        origSelectionStart = elem.selectionStart;
        origSelectionEnd = elem.selectionEnd;
    } else {
        // must use a temporary form element for the selection and copy
        target = document.getElementById(targetId);
        if (!target) {
            var target = document.createElement("textarea");
            target.style.position = "absolute";
            target.style.left = "-9999px";
            target.style.top = "0";
            target.id = targetId;
            document.body.appendChild(target);
        }
        target.textContent = elem.textContent;
    }
    // select the content
    var currentFocus = document.activeElement;
    target.focus();
    target.setSelectionRange(0, target.value.length);
    
    // copy the selection
    var succeed;
    try {
    	  succeed = document.execCommand("copy");
    } catch(e) {
        succeed = false;
    }
    // restore original focus
    if (currentFocus && typeof currentFocus.focus === "function") {
        currentFocus.focus();
    }
    
    if (isInput) {
        // restore prior selection
        elem.setSelectionRange(origSelectionStart, origSelectionEnd);
    } else {
        // clear temporary content
        target.textContent = "";
    }
    return succeed;
}
function tabSelected(args)
{

}
</script>