@{
    ViewData["Title"] = "Board";
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
    var ProjectId = ViewData["ProjectId"];
    var WorkItemTypes = ViewData["WorkItemTypes"] as List<WorkItemTypes>;
    var ProjectName = ViewData["ProjectName"] as string;
    var Iteration = ViewData["Iteration"] as int?;
    var Person = ViewData["Person"] as int?;
    var ViewRights = ViewData["GetUserViewRights"] as int?;
}
<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>

 
<link href="~/Syncfusion/ej2/material.css" rel="stylesheet" />
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">

<!--[if lt IE 9]>
<script src="../scripts/jquery-1.11.3.min.js" type="text/javascript" ></script>
<![endif]-->
@* <link href="~/SuncfusionEj1/web/content/ejthemes/default-theme/ej.web.all.min.css" rel="stylesheet" />
    <link href="~/SuncfusionEj1/web/content/default-responsive.css" rel="stylesheet" />
    <link href="~/SuncfusionEj1/web/content/ejthemes/responsive-css/ej.responsive.css" rel="stylesheet" />
    <!--[if IE 9]><!-->
    <script src="~/SuncfusionEj1/web/scripts/jsrender.min.js" type="text/javascript"></script> *@
<!--<![endif]-->
@* <script src="~/SuncfusionEj1/web/scripts/ej.web.all.min.js" type="text/javascript"></script>
    <script src="~/SuncfusionEj1/web/scripts/properties.js" type="text/javascript"></script> *@

<link href="~/css/Sprints/Sprints.css" rel="stylesheet" />
<!-- end of sidebar element -->
<!-- main-content declaration -->
<div class="main-content" id="main-text" >
    <div class="sidebar-content">
        <div class="main-card mb-12 card">
            <div class="card-body text-center">

                <div class="page-title-heading">
                    <div class="page-title-icon">
                        <i class="pe-7s-graph text-success">
                        </i>
                    </div>
                    <div>
                        Project Dashboard
                        <div class="page-title-subheading">
                            @ProjectName
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">


            <div class="col-md-5">
                <button type="button" id="iconbtn" class="btn btn-primary" onclick="CallUrl('/Dashboard/AddNewWorkItem?projectId='+@ProjectId+'&workItemType='+7+'&boardId='+0+'&parentId=0&returnUrl='+window.location.href+')">New Sprint</button>
                <button id="backlogBtn" onclick="CallUrl('/Boards/ProjectBacklog?projectId='+@ProjectId+'&&workItemType=7')">View as backlog</button>
                <button id="capacityBtn" onclick="CallUrl()">Capacity</button>
                <button id="analitycsBtn" onclick="CallUrl()">Analitycs</button>
            </div>
            <div class="col-md-3">

            </div>
            <div class="col-md-4">
                <button type="button" id="Iterations" class="btn btn-primary">Active Iteration</button>
                <button type="button" id="Persons" class="btn btn-primary">Persons</button>
                <div>
                    <label for="publicCheck" style="padding: 10px 70px 10px 0">Public</label>
                    <input id="publicCheck" type="checkbox" onchange="MakeBoardPublic()" />
                    <p id="GeneratedLink"></p>
                </div>
            </div>




        </div>
        <div class="row">
            <div class="cols-sample-area" id="board">

                <div id="KanbanHolder">
                    <div id="Kanban"></div>
                </div>

            </div>
        </div>
        <div class="row text-center">
            <h2>Empty User Stories</h2>
        </div>
        <div class="row">
            <div class="control-section" style="height:97vh;">
                <div class="content-wrapper">
                    <div id="TreeGrid"></div>
                </div>
            </div>
        </div>


    <!-- Modals -->
    <div id="AssignModel">
        <div class="btn-group dropdown-split-primary" style="text-align:center;">
            <div class="row">
                <div id="ProjectUsers"></div>
            </div>
            <div class="row">
                <button   id="assignBtn" onclick="AssignNewUser()">Assign</button>
                <button   id="cancelBtn" onclick="CancelAssign()">Cancel</button>

            </div>
        </div>
    </div>

    <div id="newWorkItemModal">
        <div class="btn-group dropdown-split-primary" style="text-align:center;">
             <button   id="taskBtn" onclick="NewTask()">Task</button>
            <button   id="issueBtn" onclick="NewIssue()"></i>Issue</button>
            <button   id="bugBtn" onclick="NewBug()">Bug</button>
        </div>
    </div>

    </div>
</div>

<style>
       .swimlane-template {
        display: inline-block;
        font-size: 15px;
        font-weight: 500;
        width: 95%;
    }

  

    .swimlane-template span {
        padding-left: 10px;
    }
</style>


<script type="text/javascript">

        var workItemName;
        var publicCheck = new ejs.buttons.Switch({ checked: false });
        publicCheck.appendTo('#publicCheck');

        var dialogObj;
        var iconbtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
        iconbtn.appendTo('#iconbtn');
        var backlogBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
        backlogBtn.appendTo('#backlogBtn');
        var capacityBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
        capacityBtn.appendTo('#capacityBtn');
        var analitycsBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
        analitycsBtn.appendTo('#analitycsBtn');


        var assignBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
        assignBtn.appendTo('#assignBtn');

        var cancelBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
        cancelBtn.appendTo('#cancelBtn');

    // DropDownButton items declaration
        var dialogNewWI;
        var taskBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
        taskBtn.appendTo('#taskBtn');
        var issueBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
        issueBtn.appendTo('#issueBtn');
        var bugBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
        bugBtn.appendTo('#issueBtn');
        

        ej.base.enableRipple(true);
        var selectedChanging;
        var selectedRowData;
        var card;
        var gData;
        window.getTags = function (data) {
            var tagDiv = '<div class="e-tags">';
            var tags = data.Tags.split(',');
            for (var i = 0; i < tags.length; i++) {
                var tag = tags[i];
                tagDiv = tagDiv.concat('<div class="e-tag e-tooltip-text">' + tag + '</div>');
            }
            return tagDiv.concat('</div>');
        };

        $.ajax({
            type: 'GET',
            url: '/Accounts/GetProjectUsers?projectId=@ProjectId',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                InitliazePUsersGrid(response);
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });
        $(function() {
            
            dialogNewWI = new ej.popups.Dialog({
                width: '600px',
                header: 'Choose you the type of work item that you want to associate with the current user story!',
                isModal: true,
                animationSettings: { effect: 'None' },
                visible: false,

                open: dialogOpenWorkItem,
                close: dialogCloseWorkItem
            });
            dialogNewWI.appendTo('#newWorkItemModal');

             dialogObj = new ej.popups.Dialog({
                width: '600px',
                header: 'Chose a user',
                isModal: true,
                animationSettings: { effect: 'None' },
                visible: false,
                open: dialogOpen,
                close: dialogClose
            });
            dialogObj.appendTo('#AssignModel');
            dialogObj.hide();
            var incomingSprintDTO =
            {
                "ProjectId": @ProjectId,
                "WorkItemTypeId": $("#ItemPriority :selected").val(),
                "IterationId": @Iteration,
                "PersonId": @Person,
                "All" : @ViewRights
            }



             $.ajax({
                type: 'POST',
                url: '/Boards/GetSprints',
                data: JSON.stringify(incomingSprintDTO),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    GenerateKaban(response);
                },
                error: function(xhr, status, error) {
                    console.log(error);
                }
            });
            var iterationDTO = {
                "Iteration": @Iteration,
                "ProjectId":@ProjectId,
                "IsPublic": false
            }

            $.ajax({
                type: 'POST',
                url: '/Boards/GetIterations',
                data: JSON.stringify(iterationDTO),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    var Iterations = new ej.splitbuttons.DropDownButton({ items: response, iconCss: 'e-ddb-icons e-profile',cssClass: 'e-outline', select:WorkItemListClicked });
                    Iterations.appendTo('#Iterations');
                },
                error: function(xhr, status, error) {
                    console.log(error);
                }
            });
            $.ajax({
                type: 'POST',
                url: '/Boards/GetPersons',
                data: JSON.stringify(iterationDTO),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    var Persons = new ej.splitbuttons.DropDownButton({ items: response, iconCss: 'e-ddb-icons e-profile',cssClass: 'e-outline', select:PersonClicked });
                    Persons.appendTo('#Persons');
                },
                error: function(xhr, status, error) {
                    console.log(error);
                }
            });

            
            var dto = {
                "id": @ProjectId,
                "WorkItemType":7
            }
            console.log(dto);
            $.ajax({
                type: 'POST',
                url: '/Backlogs/GetEmptyStories',
                data: JSON.stringify(dto),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    InitiliazeGrid(response);
                },
                error: function (xhr, status, error) {
                    console.log(error);
                }
            });
          
            console.log(dto);
          



		 });


         function GenerateKaban(response)
         {
             $("#KanbanHolder").html("<div id=\"Kanban\"></div>");
             $("#KanbanHolder").html();

            var data = ej.base.extend([], response, null, true); // To maintain the property changes, extend the object.
            console.log(data);
            var kanbanObj = new ej.kanban.Kanban({
                dataSource: data,
                dragStop: DragStopped,
                actionComplete: CardDropCheck,
                actionBegin: SwimlineBegin,
                cardDoubleClick: CardSelected,
                keyField: 'status',
                enableTooltip: true,
                columns: [
                    { headerText: 'To Do', keyField: 'Open', template: '#headerTemplate', allowToggle: true },
                    { headerText: 'In Progress', keyField: 'InProgress', template: '#headerTemplate', allowToggle: true },
                    { headerText: 'In Review', keyField: 'Testing', template: '#headerTemplate', allowToggle: true },
                    { headerText: 'Done', keyField: 'Done', template: '#headerTemplate', allowToggle: true }
                ],
                cardSettings: {
                    contentField: 'summary',
                    headerField: 'id',
                    template: '#cardTemplate',
                    selectionType: 'Multiple'
                },
                  swimlaneSettings: {
                    keyField: 'assignee',
                    template: '#swimlaneTemplate',
                    showEmptyRow: true               
                },
            });


            kanbanObj.appendTo('#Kanban');
         }
        function CardSelected(args)
        {
            console.log(args);
            console.log("/Dashboard/EditWorkItem?projectId=@ProjectId&&workItem="+args.data.innerId);
            window.location.href = "/Dashboard/EditWorkItem?projectId=@ProjectId&&workItem="+args.data.innerId+"&returnUrl="+window.location.href;

        }
        function CardDropCheck(args)
        {
            console.log(args);
            if(args.requestType == "cardChanged" && card)
            {
                card.Board = args.changedRecords[0].status;
                ValidateCardChanged();
            }
        }
        function ValidateCardChanged()
        {
            console.log("Posting");
            $.ajax({
                type: 'POST',
                url: '/Boards/ChangeWorkItemBoard',
                data: JSON.stringify(card),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    //window.location.href = "/Dashboard/AssignAccountProjects?id="+response;
                },
                error: function(xhr, status, error) {
                    console.log(error);
                }
            });
        }
         function DragStopped(args)
         {
            console.log(args);
            card = {
                "CardId" :args.data[0].innerId,
                "Board" :args.data[0].status,
                "ProjectId" : @ProjectId
            }

         }
         function WorkItemListClicked(args)
         {
             console.log(args);
            @*var incomingSprintDTO =
            {
                "ProjectId": @ProjectId,
                "WorkItemTypeId":7,
                "IterationId":  $("#Iterations :selected").val(),
                "PersonId": @Person
            }



             $.ajax({
                type: 'POST',
                url: '/Boards/GetSprints',
                data: JSON.stringify(incomingSprintDTO),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(response) {
                    GenerateKaban(response);
                },
                error: function(xhr, status, error) {
                    console.log(error);
                }
            });*@
         }

         function PersonClicked(args) {
             console.log(args);
         }

        function ChangeOwner(data)
        {

            selectedChanging = data;
            console.log(data);
        //    selectedChangingId = id;
            console.log("Changing Owner");
            dialogOpen();
        }

         function CallUrl(url) {
             window.location.href = url;
    }

    function AssignNewUser()
    {
        selectedChanging.textContent = selectedRowData.name;
        ChangeCardOwner(selectedChanging.id, selectedRowData.name);
        CancelAssign();
    }
    function CancelAssign()
    {
        dialogClose();
        dialogObj.hide();

    }
    function dialogClose() {
            document.getElementById('AssignModel').style.display = 'none';

    }
    function dialogOpen() {
 
        document.getElementById('AssignModel').style.display = 'block';
    }


    function dialogOpenWorkItem()
    {
        document.getElementById('newWorkItemModal').style.display = 'block';
    }

    function dialogCloseWorkItem()
    {
        document.getElementById('newWorkItemModal').style.display = 'none';
    }
    function InitliazePUsersGrid(data)
    {
        console.log(data);
         var ProjectUsers = new ej.treegrid.TreeGrid({
            dataSource: data,
            allowSelection: true,
            allowFiltering: true,
            allowSorting: true,
            toolbar: ['Search'],
            rowSelected: UserRowSelected,
            recordDoubleClick: UserSelected,
            filterSettings: { type: 'Menu' },
            enableHover: false,
            columns: [
                 { field: 'name', headerText: 'Email', width: 110 },
            ]
        });

        ProjectUsers.appendTo('#ProjectUsers');
    }
    function UserRowSelected(args)
    {
        selectedRowData = args.data;
        console.log(args);
    }
    function UserSelected(args)
    {
        selectedChanging.textContent = args.rowData.name;
        CancelAssign();
        ChangeCardOwner(selectedChanging.id, args.rowData.name);
    }
    function InitiliazeGrid()
    {
        console.log(data);


        var treeGridObj = new ej.treegrid.TreeGrid({
            dataSource: data,
            allowSelection: true,
            allowFiltering: true,
            allowSorting: true,
            toolbar: ['Search'],
            recordDoubleClick: EditWorkItem,
            enableVirtualization: true,
            filterSettings: { type: 'Menu' },
            selectionSettings: { persistSelection: true, type: "Multiple" },
            enableHover: false,
            allowPaging: true,
            pageSettings: { pageSize: 20 },
            columns: [
                { type: "checkbox", field: "", allowFiltering: false, allowSorting: false, width: '60' },
                { field: 'workItemType.TypeName', headerText: 'Type', width: 60 },
                { field: 'title', headerText: 'Title', width: 125 },
                { field: 'description', headerText: 'Description', width: 180 },
                { field: 'assignedAccountNavigation.Email', headerText: 'AssignedTo', width: 110 },
            ]
        });

        treeGridObj.appendTo('#TreeGrid');


    }

    function EditWorkItem(args)
    {
        console.log(args);
        window.location.href = "/Dashboard/EditWorkItem?projectId=@ProjectId&&workItem="+args.rowData.id+"&returnUrl="+window.location.href;
    }

    function ChangeCardOwner(id,name)
    {
        var incomingSprintDTO =
        {
            "CardId": id,
            "Name": name
        }

        $.ajax({
            type: 'POST',
            url: '/Boards/ChangeCardOwner',
            data: JSON.stringify(incomingSprintDTO),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function(response) {
                
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    }

    function MakeBoardPublic()
    {
        var isChecked;
        if (publicCheck.properties.checked === true)
             isChecked = 1;
        else
            isChecked = 0;


          var incomingSprintDTO =
        {
            "ProjectId": @ProjectId,
            "isChecked": isChecked
        }

        $.ajax({
            type: 'POST',
            url: '/Boards/MakeBoardPublic',
            data: JSON.stringify(incomingSprintDTO),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function(response) {
                $("#GeneratedLink").html(response.data);
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    }
    function NewWorkItem(btn)
    {
        console.log(btn.id);
        workItemName = btn.id;
        dialogNewWI.show();

    }

    function SwimlineBegin(args)
    {
 
    }


     function NewTask(){
        window.location.href = "/Dashboard/AddNewWorkItem?projectId=@ProjectId&workItemType="+3+"&boardId=0&parentId=0&&returnUrl="+window.location.href+"&title="+workItemName;
    }
    function NewIssue(){
        window.location.href = "/Dashboard/AddNewWorkItem?projectId=@ProjectId&workItemType="+6+"&boardId=0&parentId=0&&returnUrl="+window.location.href+"&title="+workItemName;
    }
    function NewBug(){
        window.location.href = "/Dashboard/AddNewWorkItem?projectId=@ProjectId&workItemType="+1+"&boardId=0&parentId=0&&returnUrl="+window.location.href+"&title="+workItemName;
    }
</script>


<script id="headerTemplate" type="text/x-jsrender">
    <div class="header-template-wrap">
        <div class="header-icon e-icons ${keyField}"></div>
        <div class="header-text">${headerText}</div>

    </div>
</script>
<script id="cardTemplate" type="text/x-jsrender">
    <div class='card-template ${priority}' style='content: "\e511 ";'>
        <div class='card-header e-tooltip-text'>
            <div class="row" style="display:flex;">
                <div class="col-2">
                    <span class="e-search"></span>
                </div>
                <div class="col-10" style="width:100%; text-align:center;">
                    <span style="text-align:center;">${id} ${title}</span>
                </div>
            </div>
        </div>


        <div class='card-template-wrap'>
            <div class="row" style="padding:2%;">
                <div class='e-text'>${summary}</div>

            </div>
            <div class="row" style="padding:2%;">
                <div class='Interactice' onclick='ChangeOwner(this)' id='${id}'>${assgignedAccount}</div>
            </div>
            <div class="row status" style="display:flex;padding:2%;">

                <div class="col-3">
                    <span class='status'></span><div class='e-text' style="text-align:left;">Status:</div>
                </div>
                <div class="col-9" style="width:100%;">
                    <div class='Interactice'>${status}</div>
                </div>
            </div>

        </div>

    </div>
</script>

<script id="swimlaneTemplate" type="text/x-jsrender">
     <div style="width:100%; display:inline-block">
        <span >${textField}</span>
        <button class="e-control e-btn e-lib e-outline e-primary" style="margin-left:10px;" id="${textField}"  onclick='NewWorkItem(this)' ><span class="e-icons plus">New Work Item</span></button>
    </div>  
</script>