@{
    var CategoryFieldId = ViewData["CategoryField"] as int?;
    var PageData = ViewData["PageData"] as AssociatedDocumentationCategoryPage;
    var ModalType = ViewData["Modal"]  as int?;
    var random = Guid.NewGuid().ToString().Split('-').FirstOrDefault().ToString();
    var ProjectId = ViewData["ProjectId"] as int?;
}
<link href="https://unpkg.com/quill-better-table@1.2.8/dist/quill-better-table.css" rel="stylesheet">
 

<style>
   .ql-snow .ql-editor pre.ql-syntax {
	background-color: #6a97a8;
	color: #f8f8f2;
	overflow: visible;
    }
    #SaveDocumentationPage_title{
        text-align: center;
        width: 100%;
    }
    .e-upload {
        width: 100%;
        position: relative;
        margin-top: 15px;
        float: none;
    }
    .e-upload .e-upload-actions {
        float: none;
        text-align: right;
    }
    .control_wrapper .e-upload .e-upload-drag-hover {
        margin: 0;
    }
    button:hover{
        color: #e6326f;
    }
    .ql-Table:before{
        font-family: "e-icons" !important;
        content:'\e705';
        border: none;
        cursor: pointer;
        float: left;
        height: 24px;
        padding: 3px 5px;
        width: 28px;
    }
</style>

<div id="SaveDocumentationPage"  >
    <div class="container-fluid">
        <div class="row">
            <input id="InputPageDataTitle" />
        </div>
         <div class="row">
            <div class="control_wrapper">
                <!-- Initialize Uploader -->
                <input type='file' id='File_@random' name='UploadFiles'/>
            </div>
        </div>
        <div class="row">
            <div style="min-height: 51vh;" id="InputPageData" class="form-control">
                @if(PageData != null)
                {
                    @Html.Raw(@PageData.Content)
                }
            </div>
            <div class="panel">
            <div id="snow-container"></div>
                <div>
                    <button id="insert-table">Insert Table</button>
                    <button id="insert-row-above">Insert Row Above</button>
                    <button id="insert-row-below">Insert Row Below</button>
                    <button id="insert-column-left">Insert Column Left</button>
                    <button id="insert-column-right">Insert Column Right</button>
                    <button id="delete-row">Delete Row</button>
                    <button id="delete-column">Delete Column</button>
                    <button id="delete-table">Delete Table</button>
                </div>
            </div>
        </div>
        <div class="row InlineFlex">
            <button class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 50%;" onclick="SubmitDocumentationPage()">Submit</button>
            <button class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 50%;" onclick="CloseDocumentationPage()">Cancel</button>
        </div>
    </div>

</div>

<script>
var Modal = "@ModalType";
var activeFiles = [];
var InputPageData;
var InputPageDataTitle = new ej.inputs.TextBox({
    placeholder: 'The title of the current page item',
    floatLabelType: 'Auto',
});
@if(PageData != null)
{
  @:  InputPageDataTitle.value = "@PageData.Title"
}

InputPageDataTitle.appendTo('#InputPageDataTitle');

InputPageData = new Quill('#InputPageData', {
        theme: 'snow',
        modules: 
        {
            table: false,  // disable table module
            history: {
                delay: 2000,
                maxStack: 500,
                userOnly: true
            },
            
            syntax: true,              // Include syntax module
            toolbar: 
            [
            [{ header: [1, 2, false] }],
            ["bold", "italic", "underline"],
            [{ 'list' : 'ordered' }, { 'list' : 'bullet' }],
            ["image", "code-block",'Table']
            ]
        }
}); 

 

var customButton =  document.getElementsByClassName('ql-Table')[0];
customButton.addEventListener('click', function() {
   console.log("Clicked");
    const value = `<h1>New content here</h1>`
    const delta = InputPageData.clipboard.convert(value)
    var existingDelta = InputPageData.getContents()
    var combinedDelta = existingDelta.concat(delta);
    InputPageData.setContents(combinedDelta, 'silent')
});
var method;
var SaveDocumentationPageModal;
SaveDocumentationPageModal = new ej.popups.Dialog({
    width: '100%',
    height: '100%',
    header: 'Enter the page details',
    isModal: true,
    animationSettings: { effect: 'None' },
    visible: false
});
SaveDocumentationPageModal.appendTo('#SaveDocumentationPage');
SaveDocumentationPageModal.show();
var dropElement = document.getElementsByClassName('control-fluid')[0];

var uploadObj = new ej.inputs.Uploader({
    asyncSettings: {
        saveUrl: '/Uploader/Save',
        removeUrl: '/Uploader/Remove',

    },
    removing: onFileRemove,
    dropArea: dropElement,
    selected: ItemSelected

});
uploadObj.appendTo('#File_@random');
function ItemSelected(args) {
    console.log(args);
    selectedImage = window.location.origin+"/Files/Uploads/"+args.filesData[0].rawFile.name;
    var length = InputPageData.getLength();
    console.log(length);
    activeFiles.push({
        "FileName":args.filesData[0].rawFile.name,
        "Line" : length+1
    });
    InputPageData.insertEmbed(length+1, 'image', selectedImage);

}
var Delta;

function onFileRemove(args) {
    console.log(args);
    args.postRawFile = false;
}

 
function CloseDocumentationPage()
{
    $("#DocumentationPageControl").load('/Documentation/DocumentationPage?id='+CategoryFieldId+'&&projectId=@ProjectId');
    SaveDocumentationPageModal.hide();

}

function SubmitDocumentationPage()
{
    var method;
    var messagesDto = {
        "Id" : 0,
        "Title" : $("#InputPageDataTitle").val(),
        "CategoryField" : @CategoryFieldId,
        "Content" :  $("#InputPageData").children()[0].innerHTML
    }
    @if(PageData == null)
    {
    @:    method = "AddNewPage";
    }
    @if(PageData != null)
    {
    @:   messagesDto.Id = @PageData.Id;
    @:   method = "EditPage";
    }
    
    console.log(messagesDto);
    console.log($("#InputPageDataTitle").val());
    if($("#InputPageDataTitle").val())
    {

        $.ajax({
                type: 'POST',
                url: '/Documentation/'+method,
                data: JSON.stringify(messagesDto),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                
                success: function (response) {
                    CloseDocumentationPage();
                },
                error: function (xhr, status, error) {
                    console.log(error);
                }
        });
    }
    else
        ShowAlert("Input field Title Name must contain a value!!!");
}
</script>