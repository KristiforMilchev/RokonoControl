@{
    var KeySettings = ViewData["ProjectKey"] as AssociatedProjectApiKeys;
    var ProjectId = ViewData["ProjectId"] as int?;
    var value = ViewData["RuleValueBugReport"] as int?;
}
<style>
    .e-input-picture:before {
        content: '\e30d';
        font-family: e-icons;
    }
    
    .e-input-calendar:before {
        content:'\e901';
        font-family: e-icons;
        font-size: 13px;
    }
    .FileIcon:before {
        content: '\ec2a';
        font-family: e-icons;
        font-size: 107px;
    }
    .UploadHolder{
        min-height: 400px;
        max-height: 500px;
        overflow-y: auto;
    }
</style>

<div class="col-lg-12 control-section">
    <div class="row">
        <div class="control_wrapper">
            <div class="col-md-6">
                <label for="EnableBugReports" style="padding:2%; min-width:303px;">Enable Bug Report</label>
                <input id="EnableBugReports" onchange="BugHandlerChanged()" type="checkbox" />
            </div>
            <div class="col-md-6">
                <div class="e-input-group e-float-icon-left">
                    <span class="e-input-group-icon e-input-picture" onclick="CopyToClipboardBugs()" id="copyButton"></span>
                    <div class="e-input-in-wrap">
                        <input class="e-input" id="InputBugReport" type="text" placeholder="Enable Public Bug Reporting" value="@KeySettings.ApiSecret" disabled/>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <div class="row">
        <div class="col-lg-6 control-section">
            <div class="control_wrapper" id="GridHolder">
                <div id="TreeGrid"></div>
            </div>
        </div>
       <div class="col-lg-6 control-section">
            <div class="control_wrapper">
                <h2 id="WorkItemTitle" style="text-align: center;">I am a Heading</h2>
                <p id="RepoSteps" style="text-align: justify;">
                  Reproduction Steps: <span id="RepoSteps"></span>
                </p>
                <div class="row UploadHolder" id="FileHolder">
                    <div class="col-md-4">
                        <div class="row">
                            <img src="~/Files/Uploads/tvc_f4b7854e16de4fd5f7702124201b3db7.png" style="width: -moz-available;" />
                        </div>
                        <p style="text-align: center;">FileName</p>
                        <div class="row" style="text-align: center;">
                            <button  class="btn btn-primary e-control e-btn e-lib e-outline e-primary">
                                Download
                            </button>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="row" style="text-align: center;">
                            <span class="FileIcon"></span>
                        </div>
                        <p style="text-align: center;">FileName</p>
                        <div class="row" style="text-align: center;">
                            <button  class="btn btn-primary e-control e-btn e-lib e-outline e-primary">
                                Download
                            </button>
                        </div>
                    </div>
                </div>
                <div class="row" style="text-align: center;">
                    <button type="button"  onclick="OpenModal()" class="btn btn-primary e-control e-btn e-lib e-outline e-primary"  id="relationBtn">Add new relation</button>
                </div>
                 <div class="row" style="text-align: center;">
                    <h2>Relationship Type: <span id="RelationShipWItemType"></span></h2>
                    <p>Work Item ID: <span id="RelationWorkItemId"></span></p>
                    <p>Work Item Name: <span id="RelationWorkItemName"></span></p>
                 </div>
                 <div class="row">
                     <p style="text-align: justify;">
                         Description : <span id="RelationDescription"></span>
                     </p>
                 </div>
                 <div class="row" style="text-align: center;">
                    <button type="button"  onclick="SaveChanges()" class="btn btn-primary e-control e-btn e-lib e-outline e-primary"  id="saveChangesBtn">Save Changes</button>
                    <button type="button"  onclick="CancelChanges()" class="btn btn-primary e-control e-btn e-lib e-outline e-primary"  id="cancelBtn">Remove Changes</button>
                 </div>
            </div>
        </div>
    </div>
</div>
 
<script>
    var id = @ProjectId;
    var wItemId = 0;
    var EnableBugReports;
    EnableBugReports = new ejs.buttons.Switch({ checked: @value });
    EnableBugReports.appendTo('#EnableBugReports');
    var BugReportChecked = 0;
    var lastActiveId;
    if(@value === 1)
        $("#InputBugReport").prop( "disabled", false )
    else
        $("#InputBugReport").prop( "disabled", true )

    LoadPublicGrid();

    function LoadPublicGrid()
    {
         var dto = {
            "id": @ProjectId,
        }
            console.log(dto);

     

        $.ajax({
            type: 'POST',
            url: '/Backlogs/GetPublicBugReports',
            data: JSON.stringify(dto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                InitializePublicBugGrid(response);
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });
    }

    function BugHandlerChanged()
    {
        if (EnableBugReports.properties.checked === true)
        {
            BugReportChecked= 1;
            $("#InputBugReport").prop( "disabled", false )
        }
        else
        {
            BugReportChecked = 0;
            $("#InputBugReport").prop( "disabled", true )

        }
          var dto = {
            "ProjectId":@ProjectId,
            "RuleName": "BugReport",
            "Value": BugReportChecked
        }
        $.ajax({
            type: 'POST',
            url: '/ApiKeySettings/EnableProjectFeature',
            data: JSON.stringify(dto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                alert("Feature enabled, please save you api key to authorize the connection on the front end of your application.");
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });
    }
    function InitializePublicBugGrid(data )
    {
        console.log(data);
        $("#GridHolder").html("");
        $("#GridHolder").html("<div id=\"TreeGrid\"></div>");

        var treeGridObj = new ej.treegrid.TreeGrid({
            dataSource: data,
            allowSelection: true,
            allowFiltering: true,
            allowSorting: true,
            toolbar: ['Search'],
            recordDoubleClick: EditWorkItemBugGrid,
            enableVirtualization: true,
            filterSettings: { type: 'Menu' },
            selectionSettings: { persistSelection: true, type: "Multiple" },
            enableHover: false,
            allowPaging: true,
            pageSettings: { pageSize: 20 },
            height:'750px',
            columns: [
                { type: "checkbox", field: "", allowFiltering: false, allowSorting: false, width: '60' },
                { field: 'workItemType.TypeName', headerText: 'Type', width: 60,customAttributes: {class: "workItemIcon"}, textAlign: 'Right' },
                { field: 'title', headerText: 'Title', width: 125 },
                { field: 'description', headerText: 'Description', width: 180 },
                { field: 'assignedTo', headerText: 'AssignedTo', width: 110 },
            ]
        });

        treeGridObj.appendTo('#TreeGrid');
        ShowContent();


    }

    function EditWorkItemBugGrid(args)
    {
        console.log(args);
        var dto = {
            "id": args.rowData.id
        }
        wItemId =args.rowData.id;

        $.ajax({
            type: 'POST',
            url: '/Backlogs/GetPublicBugReport',
            data: JSON.stringify(dto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                console.log(response);
                $("#WorkItemTitle").html(response.title);
                $("#RepoSteps").html(response.repoSteps);
                var bindingData = "";
                response.associatedWorkItemFiles.forEach(element => 
                {
                    console.log(element.file.fileType);

                    if(element.file.fileType === 1)
                    {
                        bindingData += "<div class=\"col-md-4\">"+
                                            "<div class=\"row\">"+
                                                "<img src=\"~/Files/Uploads/"+element.file.fileLocation+" style=\"width: -moz-available;\" />"+
                                            "</div>"+
                                            "<p style=\"text-align: center;\">"+element.file.fileLocation+"</p>"+
                                            "<div class=\"row\" style=\"text-align: center;\">"+
                                                "<button  class=\"btn btn-primary e-control e-btn e-lib e-outline e-primary\">"+
                                                    "Download"+
                                                "</button>"+
                                            "</div>"+
                                        "</div>";
                    }
                    else
                    {
                        bindingData += "<div class=\"col-md-4\">"+
                                            "<div class=\"row\" style=\"text-align:center;\">"+
                                               "<span class=\"FileIcon\"></span>"+
                                            "</div>"+
                                            "<p style=\"text-align: center;\">"+element.file.fileLocation+"</p>"+
                                            "<div class=\"row\" style=\"text-align: center;\">"+
                                                "<button  class=\"btn btn-primary e-control e-btn e-lib e-outline e-primary\">"+
                                                    "Download"+
                                                "</button>"+
                                            "</div>"+
                                        "</div>";              
                    }
                });
                $("#FileHolder").html(bindingData);

            },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });
    }
 
    function SaveChanges()
    {
        var dto = {
            "id": wItemId
        }
 
        $.ajax({
            type: 'POST',
            url: '/Backlogs/MakeWorkItemPrivate',
            data: JSON.stringify(dto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                LoadPublicGrid();
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });
    }

    function CancelChanges()
    {
        var dto = {
            "id": wItemId
        }
 
        $.ajax({
            type: 'POST',
            url: '/Backlogs/MakeWorkItemPublic',
            data: JSON.stringify(dto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                LoadPublicGrid();
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });
    }
   function CopyToClipboardBugs()
    {
        var copyText =  document.getElementById("InputBugReport");
         copyText.select();
        copyText.setSelectionRange(0, 99999); /*For mobile devices*/

        /* Copy the text inside the text field */
        document.execCommand("copy");
    }
</script>




@await Component.InvokeAsync("RelateWorkItem", new IncomingIdRequest{
    Id = 0,
    WorkItemType = @ProjectId.Value
})