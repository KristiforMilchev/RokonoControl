@{
    var builds = ViewData["Builds"] as List<Builds>;
    var relationships = ViewData["Relationships"] as List<WorkItemRelations>;
    var ProjectId = ViewData["ProjectId"];
    var Projects = ViewData["Projects"] as List<Projects>;
    var defaultIteration = ViewData["DefaultIteration"] as int?;
    var IsAdmin = ViewData["IsAdmin"] as int?;
}

<!doctype html>
<html>
<head>
    <link href="~/css/Shared/_LayoutDashboard.css" rel="stylesheet" />


    <script src="https://cdn.syncfusion.com/ej2/dist/ej2.min.js" type="text/javascript"></script>
    <link href="https://cdn.syncfusion.com/ej2/material.css" rel="stylesheet">
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet">
  
</head>
<body>
 
    <div class="stackblitz-container material">
        <div class="control-section">

            <!-- sample level element  -->
            <div id="wrapper">

                <!--header-section  declaration -->
                <div class="main-header" id="header-section">
                    <ul class="header-list">
                        <li class="float-left header-style icon-menu" id="hamburger"></li>
                        <li class="float-left header-style nav-pane">
                            <b>Rokono Control</b>
                        </li>
                        <li class="header-style float-right support border-left"><b>Support</b></li>
                    </ul>
                </div>
                <!-- end of header-section -->
                <!-- sidebar element declaration -->
                <aside id="sidebar-treeview">
                    <div class="main-menu">
                        <div class="table-content" style="padding:0;">
                            @if (IsAdmin == 1)
                            {
                                <button  type="button" id="Persons" class="btn btn-primary" style="margin-top:2px; width:100%" onclick="CallUrl('/Dashboard/AddNewProject?user=')">Add new project</button>

                            }
                            @await Component.InvokeAsync("LoadedProjects", @ProjectId)
                            <div class="row" style="background-color:#4fb9fc; margin:0;">
                                <img src="~/Logo/logo.png" class="img-responsive" style="width:50%;height:59%; margin-left:25%;" />
                            </div>

                            <div class="row" style="margin:0;">
                                <input type="text" placeholder="Search..." style="width:100%;" class="search-icon">
                            </div>
                            <div class="row" style="margin:0;">
                                <p class="main-menu-header">Navigation</p>
                                <button  type="button" id="NotesBtn" class="btn btn-primary" style="margin-top:2px; width:100%" onclick="ShowNotes()" >Notes</button>

                            </div>
                            <div class="row" style="margin:0;">
                                <div>
                                    <ul id="main-treeview">
                                    </ul>
                                </div>
                            </div>

                        </div>



                    </div>
                </aside>

                <div class="main-content" id="main-text" style="min-height: 94vh;">
                    <div class="sidebar-content">
                        @await Component.InvokeAsync("Notes", @ProjectId)

                        @RenderBody()
                    </div>
                </div>

            </div>


        </div>

    </div>

<script>
  

    var Persons = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    Persons.appendTo('#Persons');
    var data;
    // Sidebar Initialization
    var sidebarMenu = new ej.navigations.Sidebar({
        width: '290px',
        target: '.main-content',
        mediaQuery: '(min-width: 600px)',
    });
    sidebarMenu.appendTo('#sidebar-treeview');
    //end of Sidebar initialization

    // Toggle the Sidebar
    document.getElementById('hamburger').addEventListener('click', function () {
        sidebarMenu.toggle();
    });
    // open new tab
    var URL = location.href.replace(location.search, '');
  //  document.getElementById('newTab').setAttribute('href', URL.split('#')[0] + 'sidebar/responsive-panel/index.html');
    data = [

        {
            nodeId: '01', nodeText: 'Dashboard', iconCss: 'icon-th icon',
            nodeChild: [
                { nodeId: '01-01', nodeText: 'Home', iconCss: 'icon-circle-thin icon', link:'/Dashboard/ProjectDashboard?id=@ProjectId' },
                { nodeId: '01-02', nodeText: 'Project Details', iconCss: 'icon-circle-thin icon', link:'/Dashboard/ProjectDetails' },
                { nodeId: '01-03', nodeText: 'Manage Accounts', iconCss: 'icon-circle-thin icon', link:'/Dashboard/ManageAccounts?id=@ProjectId' },
                { nodeId: '01-04', nodeText: 'Generate Changelog', iconCss: 'icon-circle-thin icon', link:'/Dashboard/ChangelogGenerator?projectId=@ProjectId' },
            ]
        },
        {
            nodeId: '02', nodeText: 'Backlog', iconCss: 'icon-code icon',
            nodeChild: [
                { nodeId: '02-01', nodeText: 'Work Items', iconCss: 'icon-circle-thin icon', link: '/Backlogs/Index?projectId=@ProjectId&&boardId' },
                { nodeId: '02-02', nodeText: 'Planning Boards', iconCss: 'icon-circle-thin icon', link: '/Boards/Index?projectId=@ProjectId' },
                { nodeId: '02-03', nodeText: 'Backlog', iconCss: 'icon-circle-thin icon', link: '/Boards/ProjectBacklog?projectId=@ProjectId&&workItemType=5' },
                { nodeId: '02-04', nodeText: 'Sprints', iconCss: 'icon-circle-thin icon', link: '/Boards/Sprints?projectId=@ProjectId&&workItemType=7&&iteration=@defaultIteration&&person=0' },
                { nodeId: '02-05', nodeText: 'View Changelogs', iconCss: 'icon-circle-thin icon', link: '/Changelog/ViewChangelogs?projectId=@ProjectId' },

            ]
        },

    ];
    console.log(data);
    // TreeView  initialization
    var mainTreeView= new ej.navigations.TreeView({
        fields: { dataSource: data, id: 'nodeId', text: 'nodeText', child: 'nodeChild' },nodeSelected: LinkSelected, expandOn: 'Click'
    });

    mainTreeView.appendTo('#main-treeview');

    function LinkSelected(args)
    {
        console.log(args);
        data.forEach(element =>
        {
            console.log(element);
            element.nodeChild.forEach(child =>
            {
                if(child.nodeId === args.nodeData.id)
                    window.location.href = child.link;
            });
        });

    // console.log(data.find(x => x.nodeChild.nodeId === args.nodeData.id));
    }

   

    function CallUrl(url)
    {
        window.location.href = url;
    }

    function ShowLoader()
    {
        $("#spinner").show();
        $("#Content").hide();
    }
    function ShowContent()
    {
        $("#spinner").hide();
        $("#Content").show();
    }


</script>

</body>
</html>



