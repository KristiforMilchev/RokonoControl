#pragma checksum "/media/kristifor/a203090e-761b-4e8f-85d9-b11075e932dd/dwarfdevelopment/Projects/GitClones/RokonoControl/Platform/Views/Dashboard/ChangelogGenerator.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ecc5b421e20dd1b94dcd71ef4298910aecbc93e3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Dashboard_ChangelogGenerator), @"mvc.1.0.view", @"/Views/Dashboard/ChangelogGenerator.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/media/kristifor/a203090e-761b-4e8f-85d9-b11075e932dd/dwarfdevelopment/Projects/GitClones/RokonoControl/Platform/Views/_ViewImports.cshtml"
using Rokono_Control;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/media/kristifor/a203090e-761b-4e8f-85d9-b11075e932dd/dwarfdevelopment/Projects/GitClones/RokonoControl/Platform/Views/_ViewImports.cshtml"
using Rokono_Control.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ecc5b421e20dd1b94dcd71ef4298910aecbc93e3", @"/Views/Dashboard/ChangelogGenerator.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9a3d88b77ca5ff650022e07aede809867a9af767", @"/Views/_ViewImports.cshtml")]
    public class Views_Dashboard_ChangelogGenerator : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "/media/kristifor/a203090e-761b-4e8f-85d9-b11075e932dd/dwarfdevelopment/Projects/GitClones/RokonoControl/Platform/Views/Dashboard/ChangelogGenerator.cshtml"
  
    ViewData["Title"] = "Generate Changelog";
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
    var projectId = ViewData["ProjectId"] as int?;

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<link href=""https://cdn.quilljs.com/1.3.6/quill.snow.css"" rel=""stylesheet"">
<!-- Main Quill library -->
<script src=""//cdn.quilljs.com/1.3.6/quill.js""></script>
<script src=""//cdn.quilljs.com/1.3.6/quill.min.js""></script>
<!-- end of sidebar element -->
<!-- main-content declaration -->
<div class=""main-content"" id=""main-text"" style=""min-height: 94vh;"">
    <div class=""sidebar-content"">
        <div id=""ChangelogInput"">
            <div class=""row  card-layout"" style=""margin-bottom: 10px;"">
                <div class=""col-md-12"">
                    <!-- Basic Card Layout  -->
                    <div tabindex=""0"" class=""e-card"" id=""basic_card"">
                        <div class=""e-card-header"">
                            Changelog generation
                        </div>
                        <div class=""e-card-content"">
                            <div class=""row"">
                                <div class=""content-wrapper"">
                                    <div id=""Grid""></div>
                   ");
            WriteLiteral(@"             </div>
                            </div>
                            
                            <div class=""row"">
                                <button id=""saveGenerated"" onclick=""GenerateChangelog()"" style=""width: 100%;""> Generate Changelog from closed work items</button>
                            </div>

                        </div>
                    </div>
                </div>
            </div>

            <div class=""row  card-layout"" style=""margin-bottom: 10px;"">
                <div class=""col-md-12"">
                    <!-- Basic Card Layout  -->
                    <div tabindex=""0"" class=""e-card"" id=""basic_card"">
                        <div class=""e-card-header"">
                            Manually fill up a changelog
                        </div>
                        <div class=""e-card-content"">
                            <div class=""row"">
                                <div class=""position-relative form-group"" style=""width:100%;""><div name=""Description"" id=""Desc");
            WriteLiteral(@"ription"" class=""form-control""></div></div>
                            </div>
                            <div class=""row"">
                                <button id=""saveCustom"" onclick=""ManualChangelog()"" style=""width: 100%;""> Save changelog to collection</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
          
        </div>
        <div id=""Confirm"" hidden >
              <div class=""row  card-layout"" style=""margin-bottom: 10px;"">
                <div class=""col-md-12"">
                    <!-- Basic Card Layout  -->
                    <div tabindex=""0"" class=""e-card"" id=""basic_card"">
                        <div class=""e-card-header"">
                            Manually fill up a changelog
                        </div>
                        <div class=""e-card-content"" style=""padding:6%"">
                            <div class=""row"">
                                <div id=""ChangelogContent""></div>
    ");
            WriteLiteral(@"                        </div>
                            <div class=""row"">
                                <div class=""col-md-6"">
                                    <button id=""confirmBtn"" onclick=""ConfirmChangelog()"" style=""width: 100%;"">Confirm</button>
                                </div>
                                <div class=""col-md-6"">
                                    <button id=""cancelBtn"" onclick=""CancelChangelog()"" style=""width: 100%;"">Cancel</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src=""https://code.jquery.com/jquery-3.4.1.min.js""></script>


<script>
    var  Description = new Quill('#Description', {
        theme: 'snow'
    });
    var currentGrid;
    var selectedRecords = [];
    var saveCustom = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    saveCustom.appendTo('#saveCustom');
 ");
            WriteLiteral(@"   var saveGenerated = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    saveGenerated.appendTo('#saveGenerated');
    var confirmBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    confirmBtn.appendTo('#confirmBtn');
    var cancelBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    cancelBtn.appendTo('#cancelBtn');

    $.ajax({
        type: 'GET',
        url: '/Dashboard/UnassociatedChangelogItems?projectId=");
#nullable restore
#line 105 "/media/kristifor/a203090e-761b-4e8f-85d9-b11075e932dd/dwarfdevelopment/Projects/GitClones/RokonoControl/Platform/Views/Dashboard/ChangelogGenerator.cshtml"
                                                         Write(projectId);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
        contentType: ""application/json; charset=utf-8"",
        dataType: ""json"",
        success: function (response) {
            console.log(response);
            LoadWorkItems(response);
        //    grid.appendTo('#WorkItemsGrid');
        },
        error: function (xhr, status, error) {
            console.log(xhr);
        }
    });
    function LoadWorkItems(data)
    {
        currentGrid = new ej.grids.Grid({
                dataSource: data,
                rowSelected: WorkItemSelected,
                rowDeselected: WorkItemDeselected,
                allowSelection: true,
                filterSettings: { type: 'Menu' },
                selectionSettings: { persistSelection: true, type: ""Multiple"" },
                enableHover: false,
                columns: [
                    { type: ""checkbox"", field: """", allowFiltering: false, allowSorting: false, width: '60' },
                    { field: 'id', headerText: 'Identifier', width: 30 },
                    { field: 'workItemTypeName");
            WriteLiteral(@"', headerText: 'Type', width: 60 },
                    { field: 'name', headerText: 'Name', width: 180 },

                ],
         });
        currentGrid.appendTo('#Grid');
    }

    function WorkItemSelected(args)
    {
        console.log(args);
        selectedRecords.push(args.data);
    }

    function WorkItemDeselected(args)
    {
        console.log(args);
        
        var index = selectedRecords.indexOf(args.data[0]);
        if (index !== -1) selectedRecords.splice(index, 1);

        console.log(selectedRecords);
    }

    function GenerateChangelog()
    {
        console.log(currentGrid);

         var dto = {
            ""Items"":  selectedRecords
            
        }
        console.log(dto);
        $.ajax({
            type: 'POST',
            url: '/Changelog/GenerateChangelog',
            data: JSON.stringify(dto),
            contentType: ""application/json; charset=utf-8"",
            dataType: ""json"",
            success: function (response) {
               // window.locat");
            WriteLiteral(@"ion.href = ""/Dashboard/Index"";
               $(""#ChangelogInput"").hide();
               $(""#ChangelogContent"").html(response.chagelog);
               $(""#Confirm"").show();
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });
    }

    function ManualChangelog()
    {
        var  content = $(""#Description"").children()[0].innerHTML;
        $(""#ChangelogInput"").hide();
        $(""#ChangelogContent"").html(content);
        $(""#Confirm"").show();
    }

    function ConfirmChangelog()
    {
        console.log($(""#ChangelogContent"").html());
          var dto = {
            ""Items"": selectedRecords,
            ""Chagelog"": """"+$(""#ChangelogContent"").html(),
            ""projectId"" : ");
#nullable restore
#line 195 "/media/kristifor/a203090e-761b-4e8f-85d9-b11075e932dd/dwarfdevelopment/Projects/GitClones/RokonoControl/Platform/Views/Dashboard/ChangelogGenerator.cshtml"
                     Write(projectId);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
        }
        console.log(dto);
        $.ajax({
            type: 'POST',
            url: '/Changelog/ConfirmChangelog',
            data: JSON.stringify(dto),
            contentType: ""application/json; charset=utf-8"",
            dataType: ""json"",
            success: function (response) {
                alert(""Changelog generated!!!"");
                window.location.href = ""/Changelog/ViewChangelogs?projectId=");
#nullable restore
#line 206 "/media/kristifor/a203090e-761b-4e8f-85d9-b11075e932dd/dwarfdevelopment/Projects/GitClones/RokonoControl/Platform/Views/Dashboard/ChangelogGenerator.cshtml"
                                                                       Write(projectId);

#line default
#line hidden
#nullable disable
            WriteLiteral(@""";
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });
    }

    function CancelChangelog()
    {
        $(""#ChangelogInput"").show();
        $(""#ChangelogContent"").html("""");
        $(""#Confirm"").hide();
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
