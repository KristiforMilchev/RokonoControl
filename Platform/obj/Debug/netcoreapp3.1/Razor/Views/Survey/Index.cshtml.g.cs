#pragma checksum "/home/dwarfdevelopment/Projects/GitClones/RokonoControl/Platform/Views/Survey/Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6cf7f19eb80de7ec511d5c403ae6789b7b5ad5bb"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Survey_Index), @"mvc.1.0.view", @"/Views/Survey/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "/home/dwarfdevelopment/Projects/GitClones/RokonoControl/Platform/Views/_ViewImports.cshtml"
using Rokono_Control;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/home/dwarfdevelopment/Projects/GitClones/RokonoControl/Platform/Views/_ViewImports.cshtml"
using Rokono_Control.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6cf7f19eb80de7ec511d5c403ae6789b7b5ad5bb", @"/Views/Survey/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9a3d88b77ca5ff650022e07aede809867a9af767", @"/Views/_ViewImports.cshtml")]
    public class Views_Survey_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "/home/dwarfdevelopment/Projects/GitClones/RokonoControl/Platform/Views/Survey/Index.cshtml"
  
    ViewData["Title"] = "Survey Management Panel";
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
    var ProjectId = ViewData["ProjectId"] as int?;
 
 

#line default
#line hidden
#nullable disable
            WriteLiteral("\n  <div class=\"row\">\n\n\n            <div class=\"col-md-12\">\n                <button type=\"button\" id=\"iconbtn\" class=\"btn btn-primary\"");
            BeginWriteAttribute("onclick", " onclick=\"", 298, "\"", 363, 3);
            WriteAttributeValue("", 308, "CallUrl(\'/Survey/CreateNewSurvey?projectId=", 308, 43, true);
#nullable restore
#line 12 "/home/dwarfdevelopment/Projects/GitClones/RokonoControl/Platform/Views/Survey/Index.cshtml"
WriteAttributeValue("", 351, ProjectId, 351, 10, false);

#line default
#line hidden
#nullable disable
            WriteAttributeValue("", 361, "\')", 361, 2, true);
            EndWriteAttribute();
            WriteLiteral(@">New Survey</button>
                <button id=""ImportWorkItemBtn"" onclick=""ImportNewWorkItems()""></i>Import Work Items</button>
                <button id=""ExportWorkItemBtn"">Export Work Items</button>
 
            </div>

</div>
<div class=""row"">
    <div class=""control-section"" style=""height:87vh;"">
        <div class=""content-wrapper"">
            <div id=""TreeGrid""></div>
        </div>
    </div>
</div>
");
            WriteLiteral(@"<script>
     ej.base.enableRipple(true);
    var button = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    button.appendTo('#iconbtn');
    var importWorkItemBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    importWorkItemBtn.appendTo('#ImportWorkItemBtn');
    var exportWorkItemBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    exportWorkItemBtn.appendTo('#ExportWorkItemBtn');
    var recycleBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    recycleBtn.appendTo('#RecycleBtn');
    var dto = {
        ""ProjectId"" : ");
#nullable restore
#line 38 "/home/dwarfdevelopment/Projects/GitClones/RokonoControl/Platform/Views/Survey/Index.cshtml"
                 Write(ProjectId);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
    }
    console.log(dto);
    $.ajax({
        type: 'POST',
        url: '/Survey/GetProjectSurveys',
        data: JSON.stringify(dto),
        contentType: ""application/json; charset=utf-8"",
        dataType: ""json"",
        success: function (response) {
            InitiliazeGrid(response);
        },
        error: function (xhr, status, error) {
            console.log(error);
        }
    });
     function InitiliazeGrid(data )
    {
        console.log(data);


        var treeGridObj = new ej.treegrid.TreeGrid({
            dataSource: data,
            allowSelection: true,
            allowFiltering: true,
            allowSorting: true,
            toolbar: ['Search'],
            recordDoubleClick: EditWorkItem,
            rowSelected: RowSelected,
            rowDeselected: RowDeselected,
            enableVirtualization: true,
            filterSettings: { type: 'Menu' },
            queryCellInfo: customiseCell,
            selectionSettings: { persistSelection: true, type: ""Multiple"" },");
            WriteLiteral(@"
            enableHover: false,
            allowPaging: true,
            pageSettings: { pageSize: 20 },
            height:'650px',
            columns: [
                { type: ""checkbox"", field: """", allowFiltering: false, allowSorting: false, width: '20' , textAlign: 'center'},
                { field: 'surveyTitle', headerText: 'Type', width: '10',customAttributes: {class: ""workItemIcon""}, textAlign: 'center' },
                { field: 'surveyDescription', headerText: 'Title', width: 125 },
             ]
        });

        treeGridObj.appendTo('#TreeGrid');
        ShowContent();


    }

    function customiseCell(args) {
        console.log(args);
        if (args.column.headerText === 'Type' ){
            args.cell.setAttribute('class', args.data.workItemIcon);
        } 
    }
    function RowSelected(args)
    {
        console.log(args);
        selectedRows.push(args.data);
    }

    function RowDeselected(args)
    {
        console.log(args.data);
        var index = selectedRows.indexO");
            WriteLiteral(@"f(args.data[0]);
        if (index > -1) {
            selectedRows.splice(index, 1);
        }
        console.log(selectedRows);

    }

    function EditWorkItem(args)
    {
        console.log(args);
        window.location.href = ""/Dashboard/EditWorkItem?projectId=");
#nullable restore
#line 115 "/home/dwarfdevelopment/Projects/GitClones/RokonoControl/Platform/Views/Survey/Index.cshtml"
                                                             Write(ProjectId);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"&&Id=""+args.rowData.id;
    }
    function DeleteWorkItems()
    {
        console.log(selectedRows);
        var incomingSprintDTO =
        {
            ""Items"":  selectedRows
        }



        $.ajax({
            type: 'POST',
            url: '/Backlogs/ItemsRemoved',
            data: JSON.stringify(incomingSprintDTO),
            contentType: ""application/json; charset=utf-8"",
            dataType: ""json"",
            success: function(response) {
               window.location.href = window.location;
            },
            error: function(xhr, status, error) {
                console.log(error);
            }
        });
    }
    function ImportItems()
    {
        var incomingSprintDTO =
        {
            ""Data"":  $(""#exportContent"").children()[0].innerHTML
        }

        $.ajax({
            type: 'POST',
            url: '/Boards/ImportWorkItems',
            data: JSON.stringify(incomingSprintDTO),
            contentType: ""application/json; charset=utf-8"",
            dataType: ");
            WriteLiteral("\"json\",\n            success: function(response) {\n        //       window.location.href = window.location;\n            },\n            error: function(xhr, status, error) {\n                console.log(error);\n            }\n        });\n    }\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
