@{
    Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
    var UserDashboard  =  ViewData["SavedWidgets"] as UserDashboards;
    var ProjectId = ViewData["ProjectId"] as int?;
    var DashboardId = ViewData["DashboardId"] as int?; 
    var PremadeDashboardWidgets =  ViewData["PremadeWidgets"] as  List<AssociatedUserDashboardPremade> ;

}

<link href="~/Syncfusion/ej2/material.css" rel="stylesheet" />
  <!-- end of sidebar element -->
  <script>

    function InitializeAssignedGrid(data, assignedId,height)
    {
        //console.log(data);
        //console.log(assignedId);

        new ej.treegrid.TreeGrid({
            dataSource: data,
            allowSelection: true,
            allowFiltering: true,
            allowSorting: true,
            toolbar: ['Search'],
            recordDoubleClick: EditWorkItem,
            enableVirtualization: true,
            filterSettings: { type: 'Menu' },
            queryCellInfo: customiseCell,
            enableHover: false,
            height:$("#layout_"+height).height(),
            columns: [
                { field: 'workItemType.TypeName', headerText: 'Type', width: '10',customAttributes: {class: "workItemIcon"}, textAlign: 'center' },
                { field: 'title', headerText: 'Title', width: 125 },
                { field: 'description', headerText: 'Description' },
            ]
        }).appendTo('#'+assignedId);
        //console.log($("#layout_"+height).height());

         @* ShowContent(); *@


    }
    function EditWorkItem(args)
    {
        //console.log(args);
        window.location.href = "/Dashboard/EditWorkItem?projectId=@ProjectId&&workItem="+args.rowData.id+"&returnUrl="+window.location.href;
    }

    function customiseCell(args) {
        if (args.column.headerText === 'Type' ){
            args.cell.setAttribute('class', args.data.workItemIcon);
        } 
    }
  </script>
<div class="control-section">
    <div style="padding:5px;text-align: right;">
        <button   class="btn btn-primary e-control e-btn e-lib e-outline e-primary"  onclick="OpenWidgetModal()" >Add Widget</button>
    </div>
    
    <div id="defaultLayout" style="overflow: auto;">
        @if(@UserDashboard != null)
        {
            @if(@UserDashboard.UserDashboardItem != null)
            {
                @foreach (var widget in @UserDashboard.UserDashboardItem)
                {
                    <div id="@widget.ItemName" class="e-panel" data-row="@widget.DataRow" data-col="@widget.DataCol" data-sizeX="@widget.DataSizeX" data-sizeY="@widget.DataSizeY">
                        <span id="close" class="e-template-icon e-clear-icon"></span>
                        <div class="e-panel-container">
                            if(@widget.AssociatedUserDashboardItemComponent != null)
                            {
                                @foreach (var widgetBuildingBlock in @widget.AssociatedUserDashboardItemComponent)
                                {
                                    if(@widgetBuildingBlock.ItemComponentNavigation.ColumnNumber  != default(int))
                                    {
                                        <div class="col-md-@widgetBuildingBlock.ItemComponentNavigation.ColumnNumber">
                                        
                                            if(@widgetBuildingBlock.ItemComponentNavigation.IsRow.Value == 1)
                                            {
                                                <div class="row">
                                                    @await Component.InvokeAsync("@widgetBuildingBlock.ComponentName")
                                                </div>
                                            }
                                            else
                                            {
                                                @await Component.InvokeAsync("@widgetBuildingBlock.ComponentName")
                                            }
                                        </div>
                                    }
                                }
                            }
                        </div>
                    </div>   
                }
            }
        }
        @if(PremadeDashboardWidgets != null)
        {
            @foreach (var widgetAssociation in @PremadeDashboardWidgets)
            {
                 
                 <div id="layout_@widgetAssociation.Id" class="e-panel" data-row="@widgetAssociation.DataRow" data-col="@widgetAssociation.DataCol" data-sizeX="@widgetAssociation.DataSizeX" data-sizeY="@widgetAssociation.DataSizeY">
                    <span id="close" class="e-template-icon e-clear-icon"></span>
                    <div class="e-panel-container">
                        @await Component.InvokeAsync(@widgetAssociation.PremadeWidget.ViewComponentName, new IncomingIdRequest{
                            ProjectId = @ProjectId.Value,
                            Id = @DashboardId.Value,
                            WorkItemType = @widgetAssociation.Id,
                            Phase= @widgetAssociation.PremadeWidget.AssociatedUserDashboardPremade.FirstOrDefault().CustomSettings
                        })
                    </div>
                </div>   
            }
        }
  
    </div>
    <div id="headerTemplate">
        <span id="close" class="e-template-icon e-clear-icon"></span>
    </div>
    <div id="content"></div>
</div>
 

   <div id="dialogIterations" style="margin-left: 70%;">
        <div id="ModalContent">
            
        </div>
        <div  class="row">
            <div id="Rowbtn">
                <button class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 100%;" onclick="CloseModal()">Cancel</button>
            </div>
            <div id="Rowbtns" style="display: ruby;">
                <button class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 50%;" onclick="SaveNewIterationSettings()">Confirm</button>
                <button class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 50%;" onclick="CloseModal()">Cancel</button>

            </div>
        </div>

    </div>

<style>
    #defaultLayout {
        padding: 10px;
    }
    
    .e-dashboardlayout.e-control .e-panel:hover span {
        display: block;
    }
    
    #defaultLayout .e-panel .e-panel-container .text-align {
        vertical-align: middle;
        font-weight: 600;
        font-size: 20px;
        text-align: center;
    }
    
    .e-template-icon {
        padding: 10px;
        float: right;
        display: none;
    }
    
    .e-clear-icon::before {
        content: '\e100';
        font-size: 12px;
        font-family: 'ej-icon';
    }

    @@font-face {
        font-family: 'ej-icon';
        src:
        url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMjdtQ/IAAAEoAAAAVmNtYXDhEOFVAAABiAAAADZnbHlmq8jV4gAAAcgAAAFQaGVhZBSREIsAAADQAAAANmhoZWEIUAQDAAAArAAAACRobXR4CAAAAAAAAYAAAAAIbG9jYQCoAAAAAAHAAAAABm1heHABDQCUAAABCAAAACBuYW1lWD3y/QAAAxgAAAIlcG9zdMl9cHoAAAVAAAAALwABAAAEAAAAAFwEAAAAAAAD8wABAAAAAAAAAAAAAAAAAAAAAgABAAAAAQAAjGeuW18PPPUACwQAAAAAANi/5c0AAAAA2L/lzQAAAAAD8wP0AAAACAACAAAAAAAAAAEAAAACAIgAAQAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQQAAZAABQAAAokCzAAAAI8CiQLMAAAB6wAyAQgAAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA4QDhAAQAAAAAXAQAAAAAAAABAAAAAAAABAAAAAQAAAAAAAACAAAAAwAAABQAAwABAAAAFAAEACIAAAAEAAQAAQAA4QD//wAA4QD//wAAAAEABAAAAAEAAAAAAAAAqAAAAAEAAAAAA/MD9ACHAAAJAi8GKwEPDR0BHwYJAQ8GHQEfDTsBPwYJAR8GOwE/Di8HCQE/Bj0BLw0rAQ8FA3T+jP6MBQYHBgcHCAcHBwcHBwYGBgUFAwMDAgEBAgMDAwUFAXT+jAUFAwMDAgEBAgMDAwUFBgYGBwcHBwcHBwgGBwYHBQF0AXQFBgcGBwcIBwcHBwcHBgYGBQQEAwMBAQEBAQEDAwQEBf6MAXQFBQMDAwIBAQIDAwMFBQYGBgcHBwcHBwgHBwYHBgPe/owBdAUFAwMDAgEBAgMDAwUFBgYGBwcHBwcHCAcGBwYHBf6M/owFBwYHBgcIBwcHBwcHBgYGBQUDBAICAQECAgQDBQUBdP6MBQUDBAICAQECAgQDBQUGBgYHBwcHBwcIBwYHBgcFAXQBdAYGBgcHBwcHBwcHBwcGBgYFBQMEAgIBAQIDAwMFAAAAEgDeAAEAAAAAAAAAAQAAAAEAAAAAAAEABwABAAEAAAAAAAIABwAIAAEAAAAAAAMABwAPAAEAAAAAAAQABwAWAAEAAAAAAAUACwAdAAEAAAAAAAYABwAoAAEAAAAAAAoALAAvAAEAAAAAAAsAEgBbAAMAAQQJAAAAAgBtAAMAAQQJAAEADgBvAAMAAQQJAAIADgB9AAMAAQQJAAMADgCLAAMAAQQJAAQADgCZAAMAAQQJAAUAFgCnAAMAAQQJAAYADgC9AAMAAQQJAAoAWADLAAMAAQQJAAsAJAEjIGVqLWljb25SZWd1bGFyZWotaWNvbmVqLWljb25WZXJzaW9uIDEuMGVqLWljb25Gb250IGdlbmVyYXRlZCB1c2luZyBTeW5jZnVzaW9uIE1ldHJvIFN0dWRpb3d3dy5zeW5jZnVzaW9uLmNvbQAgAGUAagAtAGkAYwBvAG4AUgBlAGcAdQBsAGEAcgBlAGoALQBpAGMAbwBuAGUAagAtAGkAYwBvAG4AVgBlAHIAcwBpAG8AbgAgADEALgAwAGUAagAtAGkAYwBvAG4ARgBvAG4AdAAgAGcAZQBuAGUAcgBhAHQAZQBkACAAdQBzAGkAbgBnACAAUwB5AG4AYwBmAHUAcwBpAG8AbgAgAE0AZQB0AHIAbwAgAFMAdAB1AGQAaQBvAHcAdwB3AC4AcwB5AG4AYwBmAHUAcwBpAG8AbgAuAGMAbwBtAAAAAAIAAAAAAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgECAQMABWNsb3NlAAAA) format('truetype');
        font-weight: normal;
        font-style: normal;
    }
    
    .text-align {
        line-height: 160px;
    }
    
    .e-clear-icon {
        position: absolute;
        right: 0;
        cursor: pointer;
    }
    
    .sb-demo-section .container-fluid {
        background: #E5E5E5;
    }
</style>

<script>
$("#Rowbtns").hide();
  var dialogIterations = new ej.popups.Dialog({
                width: '30vh',
                header: 'Pick  your widget',
                isModal: true,
                animationSettings: { effect: 'None' },
                visible: false,
                open: dialogOpen,
                close: dialogClose
            });
        dialogIterations.appendTo('#dialogIterations');

 var dashboard = new ej.layouts.DashboardLayout({
        cellSpacing: [10, 10],
        columns: 5,
        allowResizing: true,
        height: "85vh",
        change: DashboardChanged,
        resize: DashboardResized,

    });
dashboard.appendTo('#defaultLayout');
var dashboardObject = document.getElementById('defaultLayout').ej2_instances[0];
var count = 8;

function AddNewDashboardPanel(generatedId, Id)
{
    var panel = [{
        'id':'layout_'+generatedId , 'sizeX': 1, 'sizeY': 1, 'row': 0, 'col': 0,
        content: '<span id="close" class="e-template-icon e-clear-icon"></span><div class="text-align">' + generatedId + '</div>'
    }];
    dashboardObject.addPanel(panel[0]);
    @* var closeIcon = document.getElementById(generatedId + '_layout').querySelector('.e-clear-icon');
    closeIcon.addEventListener('click', onCloseIconHandler);
     count = count + 1; *@

    $('#layout_'+generatedId+'_body' ).load("/Widget/LoadWidget?id="+Id+"&&queryId=0&&projectId=@ProjectId&&height="+$("#"+ generatedId + "_layout").height());
}

function onCloseIconHandler(event) {
    if (event.target.offsetParent) {
        dashboardObject.removePanel(event.target.offsetParent.id);
    }

}
var closeElement = document.querySelectorAll('.e-clear-icon');
for (var i = 0; i < closeElement.length; i++) {
    closeElement[i].addEventListener('click', onCloseIconHandler);
}



    function dialogOpen()
    {
        document.getElementById('dialogIterations').style.display = 'block';
    }

    function dialogClose()
    {
        document.getElementById('dialogIterations').style.display = 'none';
    }

    function CloseModal()
    {
        $("#Rowbtns").hide();
        $("#Rowbtn").show();
        dialogIterations.hide();
    }
    
    function OpenWidgetModal()
    {
        dialogIterations.show();
        $("#ModalContent").load("/Accounts/GetWidgets?projectId=@ProjectId&&Dashboard=@DashboardId");
    }
    function DashboardResized(args)
    {
        var phase = "";
        phase += args.element.attributes["data-col"].nodeValue+",";
        phase += args.element.attributes["data-row"].nodeValue+",";
        phase += args.element.attributes["data-sizex"].nodeValue+",";
        phase += args.element.attributes["data-sizey"].nodeValue;


        //console.log(args);
          var dto = {
            "__RequestVerificationToken": args.element.attributes["id"].nodeValue,
            "Phase" : phase
        }
        //console.log(dto);
        $.ajax({
            type: 'POST',
            url: '/Widget/WidgetResized',
            data: JSON.stringify(dto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                //console.log(response);
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });
    }
    function DashboardChanged(args)
    {
        var phase = "";
 
        args.changedPanels.forEach(x=>{
            phase +=  x.properties.col+",";
            phase += x.properties.row+",";
            phase += x.properties.sizeX+",";
            phase += x.properties.sizeY;

            //console.log(args);
            var dto = {
                "__RequestVerificationToken": x.id,
                "Phase" : phase
            }
            //console.log(dto);
            $.ajax({
                type: 'POST',
                url: '/Widget/WidgetResized',
                data: JSON.stringify(dto),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    //console.log(response);
                 },
                error: function (xhr, status, error) {
                    console.log(error);
                }
            });
        })

        args.addedPanels.forEach(x=>{
            phase +=  x.properties.col+",";
            phase += x.properties.row+",";
            phase += x.properties.sizeX+",";
            phase += x.properties.sizeY;

            //console.log(args);
            var dto = {
                "__RequestVerificationToken": x.id,
                "Phase" : phase
            }
            //console.log(dto);
            $.ajax({
                type: 'POST',
                url: '/Widget/WidgetResized',
                data: JSON.stringify(dto),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    //console.log(response);
                },
                error: function (xhr, status, error) {
                    console.log(error);
                }
            });
        })

    
    }


</script>