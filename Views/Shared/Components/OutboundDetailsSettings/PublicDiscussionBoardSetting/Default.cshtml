@{
    var KeySettings = ViewData["ProjectKeyPublicMessage"] as AssociatedProjectApiKeys;
    var ProjectId = ViewData["ProjectId"] as int?;
    var value = ViewData["RuleValuePublicMessage"] as int?;

}
<style>
    .e-input-picture:before {
        content: '\e30d';
        font-family: e-icons;
    }
    
    .e-input-calendar:before {
        content:'\e901';
        font-family: e-icons;
        font-size: 13px;
    }

</style>
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<!-- Main Quill library -->
<script src="//cdn.quilljs.com/1.3.6/quill.js"></script>
<script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>
<div class="col-lg-12 control-section">
    <div class="row">
        <div class="control_wrapper">
            <div class="col-md-6">
                <label for="EnableDiscusssionss" style="padding:2%; min-width:303px;">Enable Public Chat</label>
                <input id="EnableDiscusssionss" onchange="DiscusssionssHandlerChanged()" type="checkbox" />
            </div>
            <div class="col-md-6">
                <div class="e-input-group e-float-icon-left">
                    <span class="e-input-group-icon e-input-picture" onclick="CopyToClipboardMessages()"></span>
                    <div class="e-input-in-wrap">
                        <input class="e-input" id="InputDiscusssions" type="text" placeholder="Enable Public Bug Reporting" value="@KeySettings.ApiSecret" disabled/>
                    </div>
                </div>
            </div>

        </div>
    </div>
      <div class="row">
        <div class="control_wrapper">
            <div class="row">
                <div class="control-section">
                    <div class="content-wrapper">
                        <div id="chatGrid"></div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="position-relative form-group" style="width:100%;"><label for="ChatMessageBar" class="">Add a comment</label><div name="ChatMessageBar" id="ChatMessageBar" class="form-control"></div></div>
            </div>
            <div class="row">
                <button  onclick="SendMessage()" id="SendMsgBtn"class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width:100%;"> <i class="fas fa-save"></i>Send</button>
            </div>
        </div>
    </div>
</div>


<script>
    var chatGrid;
    var ChatMessageBar;
    if(@value === 1)
        $("#InputDiscusssions").prop( "disabled", false )
    else
        $("#InputDiscusssions").prop( "disabled", true )
    var EnableDiscusssionss;
    EnableDiscusssionss = new ejs.buttons.Switch({ checked: @value });
    EnableDiscusssionss.appendTo('#EnableDiscusssionss');
    var DiscusssionsChecked = 0;
    ChatMessageBar = new Quill('#ChatMessageBar', {
        theme: 'snow'
    });
    var messagesDto=
    {
        "id":id,
    }
    $.ajax({
        type: 'POST',
        url: '/Chat/GetAllPublicMessages',
        data: JSON.stringify(messagesDto),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        
        success: function (response) {
            InitalizeChatDiscussion(response);
        },
        error: function (xhr, status, error) {
            console.log(error);
        }
    });
    
    function GetPublicMessages()
    {
        var messagesDto=
        {
            "id":id,
        }
        $.ajax({
            type: 'POST',
            url: '/Chat/GetPublicMessages',
            data: JSON.stringify(messagesDto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            
            success: function (response) {
                console.log(response);
                response.forEach(x=>{
                    console.log(x);
                    chatGrid.addRecord(x);
                    chatGrid.refresh(); // refresh the Grid.
                });
                
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
    });
    

    }
    function DiscusssionssHandlerChanged()
    {
        if (EnableDiscusssionss.properties.checked === true)
        {
            DiscusssionsChecked= 1;
            $("#InputDiscusssions").prop( "disabled", false )
        }
        else
        {
            DiscusssionsChecked = 0;
            $("#InputDiscusssions").prop( "disabled", true )

        }
          var dto = {
            "ProjectId":@ProjectId,
            "RuleName": "PublicMessage",
            "Value": DiscusssionsChecked
        }
        $.ajax({
            type: 'POST',
            url: '/ApiKeySettings/EnableProjectFeature',
            data: JSON.stringify(dto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                alert("Feature enabled, please save you api key to authorize the connection on the front end of your application.");
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });
    }
    function InitalizeChatDiscussion(data)
    {
        chatGrid = new ej.grids.Grid({
            dataSource: data,
            height: 335,
            editSettings: {allowAdding: true, mode: 'Normal', newRowPosition: 'Bottom' },
            actionBegin: ChatActionBegin,
            allowPaging: false,
            width: 'auto',
            columns: [
                { headerText: 'Name', width: 150, textAlign: 'Center', field: 'senderName' },
                { headerText: 'Message', width: 300, field: 'messageContent', textAlign: 'Left' }
            ]
        });
        chatGrid.appendTo('#chatGrid');
    }



    function ChatActionBegin(args) {
        if (args.requestType === 'save') {
            chatGrid.dataSource.shift();// Remove the newly added record from first position 
            chatGrid.dataSource.push(args.data)// Push the newly added record in data source 
            chatGrid.refresh(); // refresh the Grid.
            $("#ChatMessageBar").children()[0].innerHTML = "";
        }
    }


    function SendMessage()
    {
        var messagesDto= {
            "ProjectId":@ProjectId,
            "SenderName": "Rokono Control Administrator",
            "MessageContent": $("#ChatMessageBar").children()[0].innerHTML
        }
        console.log(messagesDto);
         $.ajax({
            type: 'POST',
            url: '/OutboundDetails/AddNewPublicMessage',
            data: JSON.stringify(messagesDto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            
            success: function (response) {
                console.log(response);
 
             },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });
    }


     setInterval(function(){   GetPublicMessages(); }, 5000);

    function CopyToClipboardMessages()
    {
        var copyText =  document.getElementById("InputDiscusssions");
        copyText.select();
        copyText.setSelectionRange(0, 99999); /*For mobile devices*/

        /* Copy the text inside the text field */
        document.execCommand("copy");

    }
</script>



